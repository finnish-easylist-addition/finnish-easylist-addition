name: Publish test lists (uBO/AdGuard with inline extras, ABP no-inline)

on:
  push:
    branches: [ master ]
    paths:
      - "test.txt"
      - "test_ubo_extras.txt"

permissions:
  contents: write

concurrency:
  group: publish-test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      GH_EMAIL: actions@users.noreply.github.com
      GH_NAME: github-actions[bot]

      SITE_DIR: site
      PATCH_DIR: patches

      SRC_MAIN: test.txt
      SRC_EXTRA: test_ubo_extras.txt

      OUT_UBO_MAIN: test.txt          # uBO julkaisu (inline extras)
      OUT_AG_MAIN:  testAG.txt        # AdGuard julkaisu (inline extras)
      OUT_ABP_MAIN: testABP.txt       # ABP julkaisu (EI inline, EI diff)

      BASES_UBO: bases/test-main-ubo
      BASES_AG:  bases/test-main-ag

      RETENTION_DAYS: "30"
      DIFF_EXPIRES_HUMAN: "1 minute"  # testisyklin minimi
      DIFF_EXPIRES_MIN:   "1"

    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Detect changed files (separate main vs extras)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          CHANGED="$(git show --name-only --pretty="" "${GITHUB_SHA}" || true)"
          echo "Changed files:"
          echo "${CHANGED}"

          MAIN_CHANGED=0
          EXTRA_CHANGED=0
          echo "${CHANGED}" | grep -E '(^|/)test\.txt$'            >/dev/null && MAIN_CHANGED=1  || true
          echo "${CHANGED}" | grep -E '(^|/)test_ubo_extras\.txt$' >/dev/null && EXTRA_CHANGED=1 || true

          if [[ "${MAIN_CHANGED}" == "0" && "${EXTRA_CHANGED}" == "0" ]]; then
            CHANGED_F="$(git diff --name-only HEAD~1..HEAD || true)"
            echo "Fallback diff:"
            echo "${CHANGED_F}"
            echo "${CHANGED_F}" | grep -E '(^|/)test\.txt$'            >/dev/null && MAIN_CHANGED=1  || true
            echo "${CHANGED_F}" | grep -E '(^|/)test_ubo_extras\.txt$' >/dev/null && EXTRA_CHANGED=1 || true
          fi

          # uBO/AG julkaisut tehdään jos joko main TAI extras muuttui (koska inlinetus)
          NEED_PUBLISH_MAIN=$(( MAIN_CHANGED == 1 || EXTRA_CHANGED == 1 ? 1 : 0 ))
          # ABP päivitetään vain jos main muuttui
          NEED_PUBLISH_ABP=$(( MAIN_CHANGED == 1 ? 1 : 0 ))

          {
            echo "MAIN_CHANGED=${MAIN_CHANGED}"
            echo "EXTRA_CHANGED=${EXTRA_CHANGED}"
            echo "NEED_PUBLISH_MAIN=${NEED_PUBLISH_MAIN}"
            echo "NEED_PUBLISH_ABP=${NEED_PUBLISH_ABP}"
          } >> "$GITHUB_ENV"

          echo "Resolved MAIN_CHANGED=$MAIN_CHANGED EXTRA_CHANGED=$EXTRA_CHANGED"
          echo "Publish uBO/AG=$NEED_PUBLISH_MAIN, ABP=$NEED_PUBLISH_ABP"

      - name: Prepare gh-pages worktree
        shell: bash
        run: |
          set -e
          git fetch --depth=1 origin gh-pages:gh-pages || true
          rm -rf "${SITE_DIR}" || true
          git worktree add "${SITE_DIR}" gh-pages
          mkdir -p "${SITE_DIR}/${PATCH_DIR}" "${SITE_DIR}/${BASES_UBO}" "${SITE_DIR}/${BASES_AG}"
          git -C "${SITE_DIR}" config user.email "${GH_EMAIL}"
          git -C "${SITE_DIR}" config user.name  "${GH_NAME}"

      - name: Compute timestamps
        id: ts
        shell: bash
        run: |
          RFC2822=$(TZ=Europe/Helsinki date -R)
          NOW_EPOCH=$(date -u +%s)
          EPOCH_MIN=$(( NOW_EPOCH / 60 ))
          echo "rfc2822=${RFC2822}"     >> $GITHUB_OUTPUT
          echo "now_epoch=${NOW_EPOCH}" >> $GITHUB_OUTPUT
          echo "epoch_min=${EPOCH_MIN}" >> $GITHUB_OUTPUT

      - name: Build uBO/AG headers and inline extras (only if needed)
        if: env.NEED_PUBLISH_MAIN == '1'
        shell: bash
        env:
          RFC2822: ${{ steps.ts.outputs.rfc2822 }}
          DIFF_EXPIRES_HUMAN: ${{ env.DIFF_EXPIRES_HUMAN }}
        run: |
          set -euo pipefail

          build_headers () {
            local src="$1" dest="$2"
            if [[ -f "${src}" ]]; then cp "${src}" raw.txt; else : > raw.txt; fi
            # Päivitä Last modified, poista vanhat Diff-Path-rivit
            awk -v lm="! Last modified: ${RFC2822}" '
              BEGIN{ done_lm=0 }
              {
                if ($0 ~ /^! +Last modified:/) { if (!done_lm) { print lm; done_lm=1 }; next }
                if ($0 ~ /^! +Diff-Path:/)     { next }
                print
              }
              END { if (!done_lm) print lm }
            ' raw.txt > t1.txt
            # Lisää/korvaa Diff-Expires
            if grep -qE '^! +Diff-Expires:' t1.txt; then
              sed -E "s/^! +Diff-Expires:.*/! Diff-Expires: ${DIFF_EXPIRES_HUMAN}/" t1.txt > t2.txt
            else
              awk -v d="! Diff-Expires: ${DIFF_EXPIRES_HUMAN}" '
                BEGIN{ added=0 }
                { print; if ($0 ~ /^! +Expires:/ && !added) { print d; added=1 } }
                END { if (!added) print d }
              ' t1.txt > t2.txt
            fi
            cp t2.txt "${dest}"
          }

          inline_extras_into () {
            local dest="$1" extras_src="$2"
            local tmp_before="__before.tmp"
            local tmp_after="__after.tmp"

            # Pilko: ennen includea -> __before.tmp, includen jälkeen -> __after.tmp
            awk '
              BEGIN{found=0}
              {
                if ($0 ~ /^!#include[[:space:]]+test_ubo_extras\.txt[[:space:]]*$/) { found=1; next }
                print > (found ? "'$tmp_after'" : "'$tmp_before'")
              }
            ' "$dest"

            if [[ -f "$extras_src" ]]; then
              # "before" osuus
              cat "$tmp_before" > "$dest"
              # yksi tyhjä rivi meta-osion ja extrasin väliin
              printf '\n' >> "$dest"
              # extras sellaisenaan (pudota johtavat tyhjät rivit)
              awk 'NF{seen=1} seen{print}' "$extras_src" >> "$dest"
              # loppuosa
              cat "$tmp_after" >> "$dest"
            else
              cat "$tmp_before" "$tmp_after" > "$dest"
            fi

            rm -f "$tmp_before" "$tmp_after"
          }

          # Rakenna uBO/AG julkaisut masterin test.txt:stä…
          build_headers "${SRC_MAIN}" "${SITE_DIR}/${OUT_UBO_MAIN}"
          build_headers "${SRC_MAIN}" "${SITE_DIR}/${OUT_AG_MAIN}"
          # …ja inlinea extras SELLaisenaan molempiin (välissä yksi tyhjä rivi)
          inline_extras_into "${SITE_DIR}/${OUT_UBO_MAIN}" "${SRC_EXTRA}"
          inline_extras_into "${SITE_DIR}/${OUT_AG_MAIN}"  "${SRC_EXTRA}"

          # Normalisoi rivinvaihdot (LF) ennen hashia/snapshotteja
          perl -pe 's/\r\n|\r/\n/g' -i "${SITE_DIR}/${OUT_UBO_MAIN}"
          perl -pe 's/\r\n|\r/\n/g' -i "${SITE_DIR}/${OUT_AG_MAIN}"

      - name: Build ABP (no diff, no extras) only if main changed
        if: env.NEED_PUBLISH_ABP == '1'
        shell: bash
        env:
          RFC2822: ${{ steps.ts.outputs.rfc2822 }}
        run: |
          set -euo pipefail
          # ABP: pelkkä Last modified, EI Diff-Path/Expires, EI inlinea
          if [[ -f "${SRC_MAIN}" ]]; then cp "${SRC_MAIN}" raw.txt; else : > raw.txt; fi
          awk -v lm="! Last modified: ${RFC2822}" '
            BEGIN{ done_lm=0 }
            {
              if ($0 ~ /^! +Last modified:/) { if (!done_lm) { print lm; done_lm=1 }; next }
              if ($0 ~ /^! +Diff-Path:/)     { next }
              if ($0 ~ /^! +Diff-Expires:/)  { next }
              if ($0 ~ /^!#include[[:space:]]+test_ubo_extras\.txt[[:space:]]*$/) { next }
              print
            }
            END { if (!done_lm) print lm }
          ' raw.txt > "${SITE_DIR}/${OUT_ABP_MAIN}"

      - name: Add Diff-Path for uBO/AG (only if needed)
        if: env.NEED_PUBLISH_MAIN == '1'
        shell: bash
        env:
          DIFF_EXPIRES_MIN: ${{ env.DIFF_EXPIRES_MIN }}
        run: |
          set -euo pipefail
          NOW_EPOCH=${{ steps.ts.outputs.now_epoch }}
          EPOCH_MIN=${{ steps.ts.outputs.epoch_min }}

          # uBO: YYYY.M.D.MINS.patch + fragment (#test.txt)
          Y=$(date -u -d "@${NOW_EPOCH}" +%Y)
          Mo=$(date -u -d "@${NOW_EPOCH}" +%-m)
          D=$(date -u -d "@${NOW_EPOCH}" +%-d)
          H=$(date -u -d "@${NOW_EPOCH}" +%H)
          Mi=$(date -u -d "@${NOW_EPOCH}" +%M)
          MINS=$(( 10#${H}*60 + 10#${Mi} ))
          PATCH_UBO="${Y}.${Mo}.${D}.${MINS}.patch"
          REL_UBO="${PATCH_DIR}/${PATCH_UBO}"

          # AdGuard: testAG-m-<epochMin>-<ttl>.patch (ei fragmenttia)
          PATCH_AG_MAIN="testAG-m-${EPOCH_MIN}-${DIFF_EXPIRES_MIN}.patch"
          REL_AG_MAIN="${PATCH_DIR}/${PATCH_AG_MAIN}"

          add_path () {
            local file="$1" rel="$2" frag="$3"
            local line
            if [[ -n "$frag" ]]; then
              line="! Diff-Path: ${rel}#${frag}"
            else
              line="! Diff-Path: ${rel}"
            fi
            # Poista vanhat Diff-Path -rivit ja aseta uusi Diff-Expires -rivin jälkeen (tai loppuun)
            grep -vE '^! +Diff-Path:' "$file" > tmp && mv tmp "$file"
            awk -v p="$line" '
              BEGIN{ins=0}
              { print; if ($0 ~ /^! +Diff-Expires:/ && ins==0) { print p; ins=1 } }
              END { if (ins==0) print p }
            ' "$file" > tmp && mv tmp "$file"
          }

          add_path "${SITE_DIR}/${OUT_UBO_MAIN}" "${REL_UBO}"    "test.txt"
          add_path "${SITE_DIR}/${OUT_AG_MAIN}"  "${REL_AG_MAIN}" ""

      - name: Snapshot composed mains (for catch-up)
        if: env.NEED_PUBLISH_MAIN == '1'
        shell: bash
        env:
          DIFF_EXPIRES_MIN: ${{ env.DIFF_EXPIRES_MIN }}
        run: |
          set -e
          cp "${SITE_DIR}/${OUT_UBO_MAIN}" "${SITE_DIR}/${BASES_UBO}/test-m-${{ steps.ts.outputs.epoch_min }}-${DIFF_EXPIRES_MIN}.base.txt"
          cp "${SITE_DIR}/${OUT_AG_MAIN}"  "${SITE_DIR}/${BASES_AG}/testAG-m-${{ steps.ts.outputs.epoch_min }}-${DIFF_EXPIRES_MIN}.base.txt"

      - name: Regenerate patches (separate uBO and AdGuard)
        if: env.NEED_PUBLISH_MAIN == '1'
        shell: bash
        env:
          RETENTION_DAYS: ${{ env.RETENTION_DAYS }}
          DIFF_EXPIRES_MIN: ${{ env.DIFF_EXPIRES_MIN }}
        run: |
          set -euo pipefail
          NOW_EPOCH=${{ steps.ts.outputs.now_epoch }}
          RETENTION_SEC=$(( ${RETENTION_DAYS} * 24 * 3600 ))

          UBO_MAIN="${SITE_DIR}/${OUT_UBO_MAIN}"
          AG_MAIN="${SITE_DIR}/${OUT_AG_MAIN}"
          SHA1_UBO=$(sha1sum "${UBO_MAIN}" | awk '{print $1}')
          SHA1_AG=$(sha1sum "${AG_MAIN}" | awk '{print $1}')

          # --- uBO-patchit (oma diff uBO:sta) ---
          write_ubo_bundle() {
            local base_epoch="$1" diff_file="$2"
            Y=$(date -u -d "@${base_epoch}" +%Y)
            Mo=$(date -u -d "@${base_epoch}" +%-m)
            D=$(date -u -d "@${base_epoch}" +%-d)
            H=$(date -u -d "@${base_epoch}" +%H)
            Mi=$(date -u -d "@${base_epoch}" +%M)
            MINS=$(( 10#${H}*60 + 10#${Mi} ))
            local ubo_path="${SITE_DIR}/${PATCH_DIR}/${Y}.${Mo}.${D}.${MINS}.patch"
            local lines=$(wc -l < "${diff_file}" | tr -d ' ')
            { echo "diff name:test.txt checksum:${SHA1_UBO} lines:${lines}"; cat "${diff_file}"; } > "${ubo_path}"
          }

          prune_ubo_for_epoch() {
            local base_epoch="$1"
            Y=$(date -u -d "@${base_epoch}" +%Y); Mo=$(date -u -d "@${base_epoch}" +%-m)
            D=$(date -u -d "@${base_epoch}" +%-d); H=$(date -u -d "@${base_epoch}" +%H)
            Mi=$(date -u -d "@${base_epoch}" +%M); MINS=$(( 10#${H}*60 + 10#${Mi} ))
            rm -f "${SITE_DIR}/${PATCH_DIR}/${Y}.${Mo}.${D}.${MINS}.patch"
          }

          # --- AdGuard-patchit (oma diff AG:stä) ---
          write_ag_bundle() {
            local epoch_min="$1" diff_file="$2"
            local ag_name="testAG-m-${epoch_min}-${DIFF_EXPIRES_MIN}.patch"
            local ag_path="${SITE_DIR}/${PATCH_DIR}/${ag_name}"
            local lines=$(wc -l < "${diff_file}" | tr -d ' ')
            { echo "diff name:testAG.txt checksum:${SHA1_AG} lines:${lines}"; cat "${diff_file}"; } > "${ag_path}"
          }

          prune_ag_for_epoch() {
            local epoch_min="$1"
            rm -f "${SITE_DIR}/${PATCH_DIR}/testAG-m-${epoch_min}-${DIFF_EXPIRES_MIN}.patch"
          }

          # --- uBO catch-up: laske uBO-diff uBO-baseista ---
          shopt -s nullglob
          for BF in "${SITE_DIR}/${BASES_UBO}"/test-*-*.base.txt; do
            BN=$(basename "$BF")
            EPOCH_MIN=$(echo "$BN" | sed -n 's/^test-m-\([0-9]\+\)-[0-9]\+\.base\.txt$/\1/p') || true
            [[ -z "$EPOCH_MIN" ]] && { echo "Skip uBO base: $BN"; continue; }
            BASE_EPOCH=$(( EPOCH_MIN * 60 ))
            AGE=$(( NOW_EPOCH - BASE_EPOCH ))

            if (( AGE > RETENTION_SEC )); then
              rm -f "$BF"
              prune_ubo_for_epoch "$BASE_EPOCH"
              continue
            fi

            diff -n "$BF" "${UBO_MAIN}" > diff_ubo.patch || true
            write_ubo_bundle "$BASE_EPOCH" diff_ubo.patch
          done
          shopt -u nullglob

          # --- AdGuard catch-up: laske AG-diff AG-baseista ---
          shopt -s nullglob
          for BF in "${SITE_DIR}/${BASES_AG}"/testAG-*-*.base.txt; do
            BN=$(basename "$BF")
            EPOCH_MIN=$(echo "$BN" | sed -n 's/^testAG-m-\([0-9]\+\)-[0-9]\+\.base\.txt$/\1/p') || true
            [[ -z "$EPOCH_MIN" ]] && { echo "Skip AG base: $BN"; continue; }
            AGE=$(( NOW_EPOCH - EPOCH_MIN*60 ))

            if (( AGE > RETENTION_SEC )); then
              rm -f "$BF"
              prune_ag_for_epoch "$EPOCH_MIN"
              continue
            fi

            diff -n "$BF" "${AG_MAIN}" > diff_ag.patch || true
            write_ag_bundle "$EPOCH_MIN" diff_ag.patch
          done
          shopt -u nullglob

      - name: Commit & push gh-pages
        working-directory: ${{ env.SITE_DIR }}
        shell: bash
        run: |
          set -e
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "Update modified filter lists"
            git push origin HEAD:gh-pages
          else
            echo "No changes to publish."
          fi
