name: Publish test lists (uBO only; ABP conditional)

on:
  push:
    branches: [ master ]
    paths:
      - "test.txt"

permissions:
  contents: write

concurrency:
  group: publish-test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      GH_EMAIL: actions@users.noreply.github.com
      GH_NAME: github-actions[bot]

      SITE_DIR: site
      PATCH_DIR: patches

      SRC_MAIN: test.txt

      OUT_UBO_MAIN: test.txt        # uBO julkaisu (diff käytössä)
      OUT_ABP_MAIN: testABP.txt     # ABP julkaisu (ei diffiä)

      BASES_UBO: bases/test-main-ubo

      RETENTION_DAYS: "30"
      DIFF_EXPIRES_HUMAN: "1 minute"  # testisyklin minimi
      DIFF_EXPIRES_MIN:   "1"

    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Prepare gh-pages worktree
        shell: bash
        run: |
          set -e
          git fetch --depth=1 origin gh-pages:gh-pages || true
          rm -rf "${SITE_DIR}" || true
          git worktree add "${SITE_DIR}" gh-pages
          mkdir -p "${SITE_DIR}/${PATCH_DIR}" "${SITE_DIR}/${BASES_UBO}"
          git -C "${SITE_DIR}" config user.email "${GH_EMAIL}"
          git -C "${SITE_DIR}" config user.name  "${GH_NAME}"

      - name: Compute timestamps
        id: ts
        shell: bash
        run: |
          RFC2822=$(TZ=Europe/Helsinki date -R)
          NOW_EPOCH=$(date -u +%s)
          EPOCH_MIN=$(( NOW_EPOCH / 60 ))
          echo "rfc2822=${RFC2822}"     >> $GITHUB_OUTPUT
          echo "now_epoch=${NOW_EPOCH}" >> $GITHUB_OUTPUT
          echo "epoch_min=${EPOCH_MIN}" >> $GITHUB_OUTPUT

      - name: Build uBO publication (remove only marker lines; drop trailing blank after marker)
        shell: bash
        env:
          RFC2822: ${{ steps.ts.outputs.rfc2822 }}
          DIFF_EXPIRES_HUMAN: ${{ env.DIFF_EXPIRES_HUMAN }}
        run: |
          set -euo pipefail

          build_headers () {
            local src="$1" dest="$2"
            if [[ -f "${src}" ]]; then cp "${src}" raw.txt; else : > raw.txt; fi
            # Päivitä Last modified, poista vanhat Diff-Path -rivit
            awk -v lm="! Last modified: ${RFC2822}" '
              BEGIN{ done_lm=0 }
              {
                if ($0 ~ /^! +Last modified:/) { if (!done_lm) { print lm; done_lm=1 }; next }
                if ($0 ~ /^! +Diff-Path:/)     { next }
                print
              }
              END { if (!done_lm) print lm }
            ' raw.txt > t1.txt
            # Lisää/korvaa Diff-Expires
            if grep -qE '^! +Diff-Expires:' t1.txt; then
              sed -E "s/^! +Diff-Expires:.*/! Diff-Expires: ${DIFF_EXPIRES_HUMAN}/" t1.txt > t2.txt
            else
              awk -v d="! Diff-Expires: ${DIFF_EXPIRES_HUMAN}" '
                BEGIN{ added=0 }
                { print; if ($0 ~ /^! +Expires:/ && !added) { print d; added=1 } }
                END { if (!added) print d }
              ' t1.txt > t2.txt
            fi
            cp t2.txt "${dest}"
          }

          # 1) Rakenna uBO-pohja masterin sisällöstä
          build_headers "${SRC_MAIN}" "${SITE_DIR}/${OUT_UBO_MAIN}"

          # 2) uBO: Poista VAIN markeririvit, ja jos markerin jälkeen on tyhjä rivi, poista sekin
          f="${SITE_DIR}/${OUT_UBO_MAIN}"
          awk '
            BEGIN { skip_blank = 0 }
            /^[[:space:]]*! -----uBO\/AG ONLY-----[[:space:]]*$/     { skip_blank=1; next }
            /^[[:space:]]*! -----uBO\/AG ONLY END-----[[:space:]]*$/ { skip_blank=1; next }
            {
              if (skip_blank) {
                if ($0 ~ /^[[:space:]]*$/) { skip_blank=0; next }  # ohita yksi tyhjä rivi markkerin jälkeen
                skip_blank=0
              }
              print
            }
          ' "$f" > "$f.__tmp" && mv "$f.__tmp" "$f"

          # 3) Normalisoi rivinvaihdot (LF) ennen hashia/diffiä
          perl -pe 's/\r\n|\r/\n/g' -i "${SITE_DIR}/${OUT_UBO_MAIN}"

      - name: Build ABP conditionally (prune marker block; drop blanks BEFORE block; no Diff-*)
        shell: bash
        env:
          RFC2822: ${{ steps.ts.outputs.rfc2822 }}
        run: |
          set -euo pipefail
          if [[ -f "${SRC_MAIN}" ]]; then cp "${SRC_MAIN}" raw.txt; else : > raw.txt; fi

          # 1) Poista markeriväli kokonaan JA poista markeria edeltävät tyhjät rivit
          awk '
            function is_blank(s){ return s ~ /^[[:space:]]*$/ }
            function flush_all(){ for(i=1;i<=n;i++) print buf[i]; n=0 }
            function flush_trim(){ last=n; while(last>=1 && is_blank(buf[last])) last--; for(i=1;i<=last;i++) print buf[i]; n=0 }
            BEGIN{ drop=0; n=0 }
            /^[[:space:]]*! -----uBO\/AG ONLY-----[[:space:]]*$/ {
              drop=1; flush_trim(); next
            }
            /^[[:space:]]*! -----uBO\/AG ONLY END-----[[:space:]]*$/ {
              drop=0; next
            }
            drop==1 { next }
            {
              if (n<16) { n++; buf[n]=$0 }
              else { print buf[1]; for(i=1;i<n;i++) buf[i]=buf[i+1]; buf[n]=$0 }
            }
            END{ flush_all() }
          ' raw.txt > abp_body.txt

          # 2) Normalisoi EOL ja poista mahdolliset Diff-* rivit rungosta varmuuden vuoksi
          perl -pe 's/\r\n|\r/\n/g' -i abp_body.txt
          grep -vE '^! +Diff-(Path|Expires):' abp_body.txt > abp_body_nodiff.txt || true

          # 3) Vertaile aiempaan ABP-julkaisuun (ilman Last modified -riviä)
          ABP_CHANGED=1
          if [[ -f "${SITE_DIR}/${OUT_ABP_MAIN}" ]]; then
            cp "${SITE_DIR}/${OUT_ABP_MAIN}" prev_abp.txt
            perl -pe 's/\r\n|\r/\n/g' -i prev_abp.txt
            grep -vE '^! +Last modified:' prev_abp.txt > prev_abp_body.txt || true
            if cmp -s prev_abp_body.txt abp_body_nodiff.txt; then
              ABP_CHANGED=0
              echo "ABP-visible content unchanged -> skip rebuilding ABP."
            fi
          fi

          if [[ "${ABP_CHANGED}" == "1" ]]; then
            # 4) Rakenna ABP: lisää vain Last modified, EI Diff-*
            awk -v lm="! Last modified: ${RFC2822}" '
              BEGIN{ done_lm=0 }
              {
                if ($0 ~ /^! +Last modified:/) { if (!done_lm) { print lm; done_lm=1 }; next }
                print
              }
              END { if (!done_lm) print lm }
            ' abp_body_nodiff.txt > "${SITE_DIR}/${OUT_ABP_MAIN}"
          fi

          echo "ABP_CHANGED=${ABP_CHANGED}" >> "$GITHUB_ENV"

      - name: Add Diff-Path for uBO
        shell: bash
        env:
          DIFF_EXPIRES_MIN: ${{ env.DIFF_EXPIRES_MIN }}
        run: |
          set -euo pipefail
          NOW_EPOCH=${{ steps.ts.outputs.now_epoch }}

          # uBO: YYYY.M.D.MINS.patch + fragment (#test.txt)
          Y=$(date -u -d "@${NOW_EPOCH}" +%Y)
          Mo=$(date -u -d "@${NOW_EPOCH}" +%-m)
          D=$(date -u -d "@${NOW_EPOCH}" +%-d)
          H=$(date -u -d "@${NOW_EPOCH}" +%H)
          Mi=$(date -u -d "@${NOW_EPOCH}" +%M)
          MINS=$(( 10#${H}*60 + 10#${Mi} ))
          PATCH_UBO="${Y}.${Mo}.${D}.${MINS}.patch"
          REL_UBO="${PATCH_DIR}/${PATCH_UBO}"

          add_path () {
            local file="$1" rel="$2" frag="$3"
            local line
            if [[ -n "$frag" ]]; then
              line="! Diff-Path: ${rel}#${frag}"
            else
              line="! Diff-Path: ${rel}"
            fi
            # Poista vanhat Diff-Path -rivit ja aseta uusi Diff-Expires -rivin jälkeen (tai loppuun)
            grep -vE '^! +Diff-Path:' "$file" > tmp && mv tmp "$file"
            awk -v p="$line" '
              BEGIN{ins=0}
              { print; if ($0 ~ /^! +Diff-Expires:/ && ins==0) { print p; ins=1 } }
              END { if (ins==0) print p }
            ' "$file" > tmp && mv tmp "$file"
          }

          add_path "${SITE_DIR}/${OUT_UBO_MAIN}" "${REL_UBO}" "test.txt"

      - name: Snapshot composed main (for catch-up)
        shell: bash
        env:
          DIFF_EXPIRES_MIN: ${{ env.DIFF_EXPIRES_MIN }}
        run: |
          set -e
          cp "${SITE_DIR}/${OUT_UBO_MAIN}" "${SITE_DIR}/${BASES_UBO}/test-m-${{ steps.ts.outputs.epoch_min }}-${DIFF_EXPIRES_MIN}.base.txt"

      - name: Regenerate uBO patches (catch-up)
        shell: bash
        env:
          RETENTION_DAYS: ${{ env.RETENTION_DAYS }}
        run: |
          set -euo pipefail
          NOW_EPOCH=${{ steps.ts.outputs.now_epoch }}
          RETENTION_SEC=$(( ${RETENTION_DAYS} * 24 * 3600 ))

          UBO_MAIN="${SITE_DIR}/${OUT_UBO_MAIN}"
          SHA1_UBO=$(sha1sum "${UBO_MAIN}" | awk '{print $1}')

          # --- uBO-patchit (bundle header + RCS-ed runko) ---
          write_ubo_bundle() {
            local base_epoch="$1" diff_file="$2"
            Y=$(date -u -d "@${base_epoch}" +%Y)
            Mo=$(date -u -d "@${base_epoch}" +%-m)
            D=$(date -u -d "@${base_epoch}" +%-d)
            H=$(date -u -d "@${base_epoch}" +%H)
            Mi=$(date -u -d "@${base_epoch}" +%M)
            MINS=$(( 10#${H}*60 + 10#${Mi} ))
            local ubo_path="${SITE_DIR}/${PATCH_DIR}/${Y}.${Mo}.${D}.${MINS}.patch"
            local lines=$(wc -l < "${diff_file}" | tr -d ' ')
            { echo "diff name:test.txt checksum:${SHA1_UBO} lines:${lines}"; cat "${diff_file}"; } > "${ubo_path}"
          }
          prune_ubo_for_epoch() {
            local base_epoch="$1"
            Y=$(date -u -d "@${base_epoch}" +%Y); Mo=$(date -u -d "@${base_epoch}" +%-m)
            D=$(date -u -d "@${base_epoch}" +%-d); H=$(date -u -d "@${base_epoch}" +%H)
            Mi=$(date -u -d "@${base_epoch}" +%M); MINS=$(( 10#${H}*60 + 10#${Mi} ))
            rm -f "${SITE_DIR}/${PATCH_DIR}/${Y}.${Mo}.${D}.${MINS}.patch"
          }

          # --- uBO catch-up ---
          shopt -s nullglob
          for BF in "${SITE_DIR}/${BASES_UBO}"/test-*-*.base.txt; do
            BN=$(basename "$BF")
            EPOCH_MIN=$(echo "$BN" | sed -n 's/^test-m-\([0-9]\+\)-[0-9]\+\.base\.txt$/\1/p') || true
            [[ -z "$EPOCH_MIN" ]] && { echo "Skip uBO base: $BN"; continue; }
            BASE_EPOCH=$(( EPOCH_MIN * 60 ))
            AGE=$(( NOW_EPOCH - BASE_EPOCH ))
            if (( AGE > RETENTION_SEC )); then
              rm -f "$BF"
              prune_ubo_for_epoch "$BASE_EPOCH"
              continue
            fi
            diff -n "$BF" "${UBO_MAIN}" > diff_ubo.patch || true
            write_ubo_bundle "$BASE_EPOCH" diff_ubo.patch
          done
          shopt -u nullglob

      - name: Commit & push gh-pages
        working-directory: ${{ env.SITE_DIR }}
        shell: bash
        run: |
          set -e
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "Update modified filter lists"
            git push origin HEAD:gh-pages
          else
            echo "No changes to publish."
          fi
